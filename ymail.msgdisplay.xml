<?xml version="1.0" encoding="UTF-8"?>
<i:table xmlns:i="http://query.yahooapis.com/v1/schema/internalTable.xsd" xmlns="http://query.yahooapis.com/v1/schema/table.xsd" securityLevel="user">
  <meta>
    <author>Yahoo! Inc.</author>
    <sampleQuery>select * from {table}</sampleQuery>
  </meta>
  <i:bindings>
   <i:select itemPath="json.result" produces="XML" auth="yahooOauth">
      <urls>
        <url>http://mail.yahooapis.com/ws/mail/v1.1/jsonrpc</url>
      </urls>
	  <inputs>
  	    <key id="fid" type='xs:string' paramType='variable' default='Inbox'/>
	    <key id="mid" type='xs:string' paramType='variable' />
		<key id="mids" type='xs:string' paramType='variable' batchable='true' maxBatchItems='20' />
	    <key id="truncateAt" type='xs:string' paramType='variable' default='1024000'/>
	    <key id="charsetHint" type='xs:string' paramType='variable' default="" />
	    <key id="blockImages" type='xs:string' paramType='variable' default="true" />
	    <key id="restrictCSS" type='xs:string' paramType='variable' default="true" />
	    <key id="expandCIDReferences" type='xs:string' paramType='variable' default="true" />
	    <key id="enableWarnings" type='xs:string' paramType='variable' default="true" />
		<key id="enableRetry" type='xs:string' paramType='variable' default="true" />
	   </inputs>
	   <execute><![CDATA[
	
		y.include("http://github.com/ramiyer/ymailtables/raw/master/messages.js");
		y.include("http://github.com/ramiyer/ymailtables/raw/master/json2.js");								 
		y.include("http://yui.yahooapis.com/3.1.1/build/yui/yui-min.js");

		var ymwsMethod = "GetMessage";
	   //Intialization
	    var content = '';
	    var params = '[{}]';


	    y.log("method = " + ymwsMethod);
	    y.log("request = " +request);

	      
//		var builtSearchParams = buildSearchQuery(inputs);
	
	//	y.log("builtSearchParams values");
		
	//	y.log(builtSearchParams);
	
		
		/*
		if(inputs['mid'] != 0 ){
			msgs =  '"message":[{' +
					 		'"mid": "' +escape(inputs["mid"])+ '"' + 
					 '}]';
		}else if(inputs['mids'] != 0){
			msgs = displayMessageParams();
		}else {
			y.log("input to this query should have atleast one mid");
		}
		*/
		
		/*
		if(inputs['mids'].length > 0){
			msgs = displayMessageParams();
		}*/
		
		y.log("mid");
		y.log(inputs['mids']);
		y.log("input mids tostring");
		y.log(inputs['mids'].toString());
		
		var tmpArray;
		tmpArray = inputs['mids'].toString();
		y.log("tmpArray");
		y.log(tmpArray);
		
	//	msgs = displayMessageParams(tmpArray);
		
	//	y.log(msgs.toString());
	
		
	
		var msgs = buildMsgParams(tmpArray);
		y.log("returned val from displayMessageParams are ");
		y.log(msgs);
	//	y.log(msgs.toString());
		
		/*		
		params = '[{' +
				 		'"fid": "' +escape(inputs["fid"])+ '",' + 
				 		'"message": [' 
									+ msgs.toString() +
						']' +',' +
				 		'"charsetHint": "' +inputs['charsetHint']+ '"' + ',' + 
				 		'"truncateAt": "' +inputs['truncateAt']+ '"' + ',' +
						'"enableRetry":"' +inputs['enableRetry']+ '"' +
				 '}]';
			
				params = '[{' +
									 		'"fid": "' +escape(inputs["fid"])+ '",' + 
									 		 msgs +',' +
									 		'"charsetHint": "' +inputs['charsetHint']+ '"' + ',' + 
									 		'"truncateAt": "' +inputs['truncateAt']+ '"' + ',' +
											'"enableRetry":"' +inputs['enableRetry']+ '"' +
									 '}]';
		
				
		*/
		/*
			params = '[{' +
					 		'"fid": "' +escape(inputs["fid"])+ '",' + 
					 		'"message": "' +msgs+ '",' +
					 		'"charsetHint": "' +inputs['charsetHint']+ '"' + ',' + 
					 		'"truncateAt": "' +inputs['truncateAt']+ '"' + ',' +
							'"enableRetry":"' +inputs['enableRetry']+ '"' +
					 '}]';
		
		y.log("params are ");
		y.log(params);
		y.log(params.toString());
		
		var p1 = params.toString();
		y.log("p1 is");
		y.log(p1);
		*/
		
		/*
	    // get parameters for the given cascade method
		y.log("params are ");
		y.log(params);
		y.log(params.toString());
		
		y.log("msgs after params is");
		y.log(msgs);
		y.log("going to stringfy");
		var msgsjson = JSON.stringify(msgs);
		y.log(msgsjson);
			
				params1 = '[{' +
						 		'"fid": "' +escape(inputs["fid"])+ '",' + 
						 		 msgs.toString() +',' +
						 		'"charsetHint": "' +inputs['charsetHint']+ '"' + ',' + 
						 		'"truncateAt": "' +inputs['truncateAt']+ '"' + ',' +
								'"enableRetry":"' +inputs['enableRetry']+ '"' +
						 '}]';

			y.log("params1 are ");
			y.log(params1);
			var p1 = JSON.stringify(params1);
			y.log("p1 is");
			y.log(p1);
			
        content = '{' +
	            '"method" : "' + ymwsMethod + '",' +
	            '"params" : ' + params.toString() +
        '}';
		 */
		
		y.log(msgs);	
		//var msgs1 = '{"params":[{"fid":"Inbox","charsetHint":"","message":[{"mid":"1_59412_AGO3iGIAAJN5TC0W9Qkst262lOM"}]}],"method":"GetMessage"}';
		//y.log(msgs1);
		
		var req = JSON.stringify(msgs);
		y.log("req");
		y.log(req);
		var returned_response = request.post(req).response;
		response.object = returned_response;
		
	 ]]></execute>
    </i:select>
  </i:bindings>
</i:table>
