<?xml version="1.0" encoding="UTF-8"?>
<i:table xmlns:i="http://query.yahooapis.com/v1/schema/internalTable.xsd" xmlns="http://query.yahooapis.com/v1/schema/table.xsd" securityLevel="user">
  <meta>
    <author>Yahoo! Inc.</author>
    <sampleQuery>select * from {table}</sampleQuery>
  </meta>
  <i:bindings>
   <i:select itemPath="json.result" produces="XML" auth="yahooOauth">
      <urls>
        <url>http://mail.yahooapis.com/ws/mail/v1.1/jsonrpc</url>
      </urls>
	  <inputs>
  	    <key id="fid" type='xs:string' paramType='variable' default='Inbox'/>
	    <key id="mid" type='xs:string' paramType='variable' />
		<key id="mids" type='xs:string' paramType='variable' batchable='true' maxBatchItems='20' />
	    <key id="truncateAt" type='xs:string' paramType='variable' default='1024000'/>
	    <key id="charsetHint" type='xs:string' paramType='variable' default="" />
	    <key id="blockImages" type='xs:string' paramType='variable' default="true" />
	    <key id="restrictCSS" type='xs:string' paramType='variable' default="true" />
	    <key id="expandCIDReferences" type='xs:string' paramType='variable' default="true" />
	    <key id="enableWarnings" type='xs:string' paramType='variable' default="true" />
		<key id="enableRetry" type='xs:string' paramType='variable' default="true" />
	   </inputs>
	   <execute><![CDATA[
	
		y.include("http://github.com/ramiyer/ymailtables/raw/master/messages.js");

		var ymwsMethod = "GetMessage";
	   //Intialization
	    var content = '';
	    var params = '[{}]';


	    y.log("method = " + ymwsMethod);
	    y.log("request = " +request);

	      
//		var builtSearchParams = buildSearchQuery(inputs);
	
	//	y.log("builtSearchParams values");
		
	//	y.log(builtSearchParams);
	//	var jsonStr = JSON.stringify(builtSearchParams);
		
		//YUI().JSON.stringify(builtSearchParams);	
			
	//	y.log(jsonStr);
		
	//	var mids = new Array();
	//	mids = inputs['mid'];
		
	//	y.log("mid array is ");
	//	y.log(mids);
		
//		var msgs = [];
		
		var msgs;
		
		/*
		if(inputs['mid'] != 0 ){
			msgs =  '"message":[{' +
					 		'"mid": "' +escape(inputs["mid"])+ '"' + 
					 '}]';
		}else if(inputs['mids'] != 0){
			msgs = displayMessageParams();
		}else {
			y.log("input to this query should have atleast one mid");
		}
		*/
		
		if(inputs['mids'].length > 0){
			msgs = displayMessageParams();
		}
		
		msgs = displayMessageParams();
		
		y.log(msgs.toString());
		
		/*	
		params = '[{' +
				 		'"fid": "' +escape(inputs["fid"])+ '",' + 
				 		'"message": [' 
									+ msgs.toString() +
						']' +',' +
				 		'"charsetHint": "' +inputs['charsetHint']+ '"' + ',' + 
				 		'"truncateAt": "' +inputs['truncateAt']+ '"' + ',' +
						'"enableRetry":"' +inputs['enableRetry']+ '"' +
				 '}]';
		*/
		
			params = '[{' +
					 		'"fid": "' +escape(inputs["fid"])+ '",' + 
					 		 msgs.toString() +',' +
					 		'"charsetHint": "' +inputs['charsetHint']+ '"' + ',' + 
					 		'"truncateAt": "' +inputs['truncateAt']+ '"' + ',' +
							'"enableRetry":"' +inputs['enableRetry']+ '"' +
					 '}]';
		
		
	    // get parameters for the given cascade method
			
        content = '{' +
	            '"method" : "' + ymwsMethod + '",' +
	            '"params" : ' + params +
        '}';

		y.log(content);	
		var returned_response = request.post(content).response;
		response.object = returned_response;
		
	 ]]></execute>
    </i:select>
  </i:bindings>
</i:table>
